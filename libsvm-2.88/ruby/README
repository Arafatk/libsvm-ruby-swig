Ruby-to-libsvm interface (adopted from the Python version by Tom Zeng)

Introduction
============

Ruby (http://www.ruby-lang.org/) is a programming language suitable for
rapid development. This ruby-to-libsvm interface is developed so 
users can easily experiment with libsvm using ruby. The interface is 
developed with SWIG, 

Installation
============

We first show the instructions for Unix

The build process for the various Unix systems is as follows:

Before you build the module, you need to find out the ruby include
directory, which is typically located at /usr/local/include/ruby or
/usr/include/ruby. You can set the variable RUBY_INCLUDEDIR in
Makefile manually or use something like the following:

	make RUBY_INCLUDEDIR=/usr/include/ruby all

Although the interface is generated by SWIG, it is not necessary to
have SWIG installed because the generated svmc_wrap.cxx is included in
this package (It was generated using SWIG 1.3.8). If you prefer
generating the interface with SWIG on your own, you can simply remove
the generated files with

	make moreclean

before building the module. Note that SWIG version >= 1.3.8 should be used.

When the build process completes, a shared object called svmc.so will be
created.  And you should be able to run the Ruby test and example code in
the ruby directory.

To install this module into the system's Ruby installation, you will need to
have the system administrator privilege and copy svmc.so and svm.rb to the
Ruby library directory(yours might be different):

  sudo cp svmc.so /usr/local/lib/site_ruby/1.8/i486-linux
	sudo cp svm.rb /usr/local/lib/site_ruby/1.8


Usage
=====
To use the module, the files svm.rb and the shared library (namely svmc.so)
must be placed in the current directory, the ruby library
directory, or the directory where the environment variable RUBYPATH
points to. The user then imports everything in svm.rb to use libsvm in
ruby:

	require 'svm'

There are three classes in svm.rb, namely Parameter, Problem, and
Model.

Parameter is used to set the parameters of the training
process. The attributes in Parameter include svm_type,
kernel_type, degree, gamma, coef0, nu, cache_size, C, eps, p,
shrinking, nr_weight, weight_label, and weight. Available svm types
include C_SVC, NU_SVC, ONE_CLASS, EPSILON_SVR, and NU_SVR. Available
kernel types include LINEAR, POLY, RBF, and SIGMOID. The user can
setup the parameters with the constructor and keyword arguments:

	param = Parameter.new(kernel_type => LINEAR, C => 10)

The user can also modify the parameters later:

	param.kernel_type = RBF

svm_problem is used to hold the training data for the problem. The
constructor takes two arguments; the first of them is the list of labels,
and the other is the list of samples. For example

	prob = Problem.new([1,-1],[[1,0,1],[-1,0,-1]])

or equivalently

	prob = Problem.new([1,-1],[{1=>1,3=>1},{1=>-1,3=>-1}])

For precomputed kernels, the first element of each instance must be
the ID. For example,

	samples = [[1, 0, 0, 0, 0], [2, 0, 1, 0, 1], [3, 0, 0, 1, 1], [4, 0, 1, 1, 2]]
	problem = Problem.new(labels, samples);

For more details of precomputed kernels, please check README of the
parent directory.

Once the parameter and problem are ready, we can construct the model:

	m = Model.new(prob, param)

To conduct n-fold cross validation; predicted labels in the validation
process are returned.

	target = cross_validation(prob, param, n)

To predict a new sample with the model:

	r = m.predict([1, 1, 1])

To obtain decision values of predicting a sample:

	d = m.predict_values([1, 1, 1])	

To predict a new sample and obtain probability estimates;
return value is a dict that maps labels to probabilities.

	prd, prb = m.predict_probability([1, 1, 1])
	sample of prd : 1.0
	sample of prb : {1:0.6, -1:0.4}

To obtain sigma of the probability density function for regression;
see ../README for the definition of the function.

	sigma = m.get_svr_probability()

To obtain the probability density function for regression; see
../README for the definition of the function.

	pdf = m.get_svr_pdf()
	probability = pdf(z)

To save the model to a file:

	m.save('test.model')

and to load the model from a file:

	m = Model.new('test.model')

Examples
========

There are two examples in this package. The one is svm_test.rb, and the
other is test_cross_validation.rb.

svm_test.rb tests various kernels on a three-class problem with
C-SVM. It also demonstrates how to obtain decision values and
probability estimates.

test_cross_validation.rb demonstrates loading data from a file and
does a ten-fold cross validation on the heart_scale dataset. It makes
use of cross_validation.rb which calls the C++ cross validation
subroutine.


Two more examples are adopted:
  test.rb      - from http://rubysvm.cilibrar.com - maker of libsvm-ruby,
                 a direct Ruby to C++ interface, partial exposure of
                 LIBSVM functions
  test_spam.rb - from http://www.igvita.com/2008/01/07/support-vector-machines-svm-in-ruby, 
                 excellent tutorials by an U of Waterloo alumni


Tom Zeng 
http://www.linkedin.com/in/tomzeng
tom.z.zeng _at_ gmail _dot_ com
